generator client {
  provider = "prisma-client-js"
  // provider        = "postgresql"
  // previewFeatures = []
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  userName  String
  password  Password?
  tokenData Token?
  deletedAt DateTime? @db.Timestamptz()

  tasks Task[]
  buyings Buying[]
  holidays Holiday[]
  notes Note[]
  dayNotes DayNote[]
  products Product[]
  productType ProductType[]
  monthMoneyInfo MonthMoneyInfo[]
  investmentType InvestmentType[]
  investmentMonthProgress InvestmentMonthProgress[]
}

model Password {
  id     Int    @id @default(autoincrement())
  hash   String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int    @unique
}

model Token {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int      @id
  updatedAt DateTime @updatedAt @db.Timestamptz()

  refreshToken String @db.VarChar()
}

enum IntervalType {
  Day
  Week
  Month
  Year
}

enum MoveTypeIfDayNotExists {
  nextIntervalFirstDay
  currentIntervalLastDay
}

model Task {
  id Int @id @default(autoincrement())

  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  updatedAt DateTime @updatedAt @db.Timestamptz()

  date        String
  isTracker   Boolean       @default(false)
  intervalPart    IntervalType?
  intervalLength    Int?
  repeatCount Int?

  moneyIncomePlan  Float?
  moneyOutcomePlan Float?

  name String

  isFood                   Boolean       @default(false)
  recipe                   String?
  
  ingredients              Ingredient[]
  repeatDays               RepeatDayTaskWithNotYearInterval[]
  repeatIfYearIntervalDays RepeatDayTaskWithYearInterval[]
  taskRepeatDayCheck       RepeatDayTaskCheck[]

  isDeleted Boolean @default(false)
  deletedAt DateTime? @db.Timestamptz()
}

model MonthMoneyInfo {
  date String @id 

  remainder Float
  investment Float
  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    Int?
}

model InvestmentType {
  id Int @id @default(autoincrement())
  name String

  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    Int?

  progress InvestmentMonthProgress[]

  
  isDeleted Boolean @default(false)
}

model InvestmentMonthProgress {
  date String @id 
  investmentTypeId Int
  investmentType InvestmentType @relation(fields: [investmentTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  investment Float
  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    Int?
}

model RepeatDayTaskCheck {
  id       Int       @id @default(autoincrement())

  trackerId Int
  tracker   Task @relation(fields: [trackerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  date String

  newDate String?

  checked          Boolean @default(false)
  note             String?
  moneyIncomeFact  Float?
  moneyOutcomeFact Float?

  deadline String? 
  
  isDeleted Boolean @default(false)

  @@unique([trackerId, date])
}

model RepeatDayTaskWithNotYearInterval {
  id       Int       @id @default(autoincrement())

  trackerId Int
  tracker   Task @relation(fields: [trackerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  intervalPartIndex      Int?

  dayFromBeginningInterval Int?

  weekNumber WeekNumber?
  weekDayNumber Int?

  moveTypeIfDayNotExists MoveTypeIfDayNotExists?
}

model RepeatDayTaskWithYearInterval {
  id       Int       @id @default(autoincrement())

  trackerId Int
  tracker   Task @relation(fields: [trackerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  intervalPartIndex Int
  yearDateDay         Int
  yearDateMonth       Int

  moveTypeIfDayNotExists MoveTypeIfDayNotExists?
}

model ProductType {
  id       Int       @id @default(autoincrement())
  name     String

  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    Int?

  isDeleted Boolean @default(false)
  products Product[] @relation(name: "ProductType")
}

model MeasureUnit {
  id   Int    @id @default(autoincrement())
  name String

  products Product[] @relation(name: "MeasureUnit")

  outcomeMeasureUnits OutcomeMeasureUnit[]
}

model Product {
  id            Int          @id @default(autoincrement())
  name          String
  typeId        Int?
  type          ProductType? @relation(name: "ProductType", fields: [typeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  measureUnitId Int
  measureUnit   MeasureUnit  @relation(name: "MeasureUnit", fields: [measureUnitId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  includedByIngredients Ingredient[]

  user      User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId    Int?
}

model OutcomeMeasureUnit {
  measureUnitId Int @id
  measureUnit   MeasureUnit  @relation(fields: [measureUnitId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  outcomeOfProduct Float

  includedByIngredients Ingredient[]
}

model Ingredient {
  id       Int       @id @default(autoincrement())

  trackerId Int
  tracker   Task @relation(fields: [trackerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  productId Int
  product Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  count Int @default(1)
  measureUnitId Int?
  measureUnit OutcomeMeasureUnit? @relation(fields: [measureUnitId], references: [measureUnitId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([trackerId, productId])
}

model Buying {
  id            Int          @id @default(autoincrement())
  userId Int 
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  note String
  checked Boolean @default(false)
}

model Note {
  id            Int          @id @default(autoincrement())
  userId Int 
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  note String
  name String
}

model DayNote {
  id            Int          @id @default(autoincrement())
  userId Int 
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  date String
  name String
}

enum WeekNumber {
  first
  second
  third
  last
}

model Holiday {
  id            Int          @id @default(autoincrement())
  userId Int 
  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  date String?

  weekNumber WeekNumber?
  weekDayNumber Int?

  moveTypeIfDayNotExists MoveTypeIfDayNotExists?
  text String
}